{"version":3,"sources":["images sync /^/.*/.png$","images/ambulance.png","images/crane.png","images/firetruck.png","images/police.png","components/Progress.js","context/QuizContext.js","components/Question.js","components/Answer.js","reducers/types.js","components/Answers.js","questions/questions.js","reducers/QuizReducer.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Progress","props","current","total","QuizContext","createContext","Question","state","useContext","currentQuestion","question","questions","src","require","style","width","Answer","classes","selected","push","value","letter","className","join","onClick","dispatch","type","currentAnswer","target","answer","Answers","answer_a","answer_b","answer_c","answer_d","correct_answer","quizReducer","action","error","showResults","answers","App","initialState","useReducer","find","questionId","key","renderResultMark","Provider","length","renderError","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.690eaf03.chunk.js","sourcesContent":["var map = {\n\t\"./ambulance.png\": 12,\n\t\"./crane.png\": 13,\n\t\"./firetruck.png\": 14,\n\t\"./police.png\": 15\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 11;","module.exports = __webpack_public_path__ + \"static/media/ambulance.3b976236.png\";","module.exports = __webpack_public_path__ + \"static/media/crane.b1c3bf09.png\";","module.exports = __webpack_public_path__ + \"static/media/firetruck.be216c95.png\";","module.exports = __webpack_public_path__ + \"static/media/police.b2449a4e.png\";","import React from \"react\";\r\n\r\nconst Progress = (props) => {\r\n  return (\r\n    <div>\r\n      <h2>\r\n        Quesiton {props.current} of {props.total}\r\n      </h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Progress;\r\n","import {createContext} from 'react';\r\n\r\nconst QuizContext = createContext();\r\n\r\nexport default QuizContext;","import React, {useContext} from 'react';\r\n\r\nimport QuizContext from '../context/QuizContext';\r\n\r\n\r\nconst Question = () => {\r\n    const {state,} = useContext(QuizContext);\r\n    const {currentQuestion, questions} = state;\r\n    const question = questions[currentQuestion];\r\n\r\n    return (\r\n        <img src={require(`../images/${question.question}.png`) } style={{width:200}} />\r\n        // <img src={require(`../images/${question.question}.png`) } style={{width:300, height:300}} />\r\n        // <h1>{question.question}</h1>\r\n    );\r\n};\r\n\r\nexport default Question;","import React from \"react\";\r\nimport {\r\n  SET_CURRENT_ANSWER,\r\n  SET_ERROR\r\n} from \"../reducers/types\";\r\n\r\nconst Answer = (props) => {\r\n  let classes = [\"answer\"];\r\n\r\n  const handleClick = (e) => {\r\n    props.dispatch({type: SET_CURRENT_ANSWER, currentAnswer: e.target.value});\r\n    props.dispatch({type: SET_ERROR, currentAnswer: ''});\r\n\r\n    // setcurrentAnswer(e.target.value);\r\n    // setError(\"\");\r\n  };\r\n\r\n\r\n  if (props.selected) {\r\n    classes.push(\"selected\");\r\n  }\r\n  return (\r\n    <button\r\n      value={props.letter}\r\n      className={classes.join(\" \")}\r\n      onClick={handleClick}\r\n    >\r\n      <span className=\"letter\">{props.letter}.</span> {props.answer}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Answer;\r\n","export const SET_CURRENT_ANSWER = 'SET_CURRENT_ANSWER';\r\nexport const SET_CURRENT_QUESTION = 'SET_CURRENT_QUESTION';\r\nexport const SET_ERROR = 'SET_ERROR';\r\nexport const SET_SHOW_RESULTS = 'SET_SHOW_RESULTS';\r\nexport const SET_ANSWERS = 'SET_ANSWERS';\r\nexport const RESET_QUIZ = 'RESET_QUIZ';","import React, {useContext} from 'react';\r\nimport Answer from './Answer';\r\nimport QuizContext from '../context/QuizContext';\r\n\r\nconst Answers = () => {\r\n  const {state, dispatch} = useContext(QuizContext);\r\n  const {currentAnswer, currentQuestion, questions} = state;\r\n  const question = questions[currentQuestion];\r\n\r\n\r\n  return (\r\n    <>\r\n      <Answer\r\n        letter=\"a\"\r\n        answer={question.answer_a}\r\n        dispatch={dispatch}\r\n        selected={currentAnswer === \"a\"}\r\n      />\r\n      <Answer\r\n        letter=\"b\"\r\n        answer={question.answer_b}\r\n        dispatch={dispatch}\r\n        selected={currentAnswer === \"b\"}\r\n      />\r\n      <Answer\r\n        letter=\"c\"\r\n        answer={question.answer_c}\r\n        dispatch={dispatch}\r\n        selected={currentAnswer === \"c\"}\r\n      />\r\n      <Answer\r\n        letter=\"d\"\r\n        answer={question.answer_d}\r\n        dispatch={dispatch}\r\n        selected={currentAnswer === \"d\"}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Answers;\r\n","export const questions = [\r\n    {\r\n      id: 1,\r\n      question: 'ambulance',\r\n      answer_a: \"Amblance\",\r\n      answer_b: \"Crane\",\r\n      answer_c:\"Firetruck\",\r\n      answer_d: \"Police\",\r\n      correct_answer: \"a\",\r\n    },\r\n    {\r\n      id: 2,\r\n      question: \"crane\",\r\n      answer_a: \"Amblance\",\r\n      answer_b: \"Crane\",\r\n      answer_c:\"Firetruck\",\r\n      answer_d: \"Police\",\r\n      correct_answer: \"b\",\r\n    },\r\n    {\r\n      id: 3,\r\n      question: \"firetruck\",\r\n      answer_a: \"Amblance\",\r\n      answer_b: \"Crane\",\r\n      answer_c:\"Firetruck\",\r\n      answer_d: \"Police\",\r\n      correct_answer: \"c\",\r\n    },\r\n    {\r\n      id: 4,\r\n      question: \"police\",\r\n      answer_a: \"Amblance\",\r\n      answer_b: \"Crane\",\r\n      answer_c:\"Firetruck\",\r\n      answer_d: \"Police\",\r\n      correct_answer: \"d\",\r\n    },\r\n  ];\r\n","import {\r\n  SET_ANSWERS,\r\n  SET_CURRENT_QUESTION,\r\n  SET_CURRENT_ANSWER,\r\n  SET_ERROR,\r\n  SET_SHOW_RESULTS,\r\n  RESET_QUIZ,\r\n} from \"./types\";\r\n\r\nfunction quizReducer(state, action) {\r\n  switch (action.type) {\r\n    case SET_CURRENT_ANSWER:\r\n      return {\r\n        ...state,\r\n        currentAnswer: action.currentAnswer,\r\n      };\r\n    case SET_CURRENT_QUESTION:\r\n      return {\r\n        ...state,\r\n        currentQuestion: action.currentQuestion,\r\n      };\r\n    case SET_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n      };\r\n\r\n    case SET_SHOW_RESULTS:\r\n      return {\r\n        ...state,\r\n        showResults: action.showResults,\r\n      };\r\n\r\n    case SET_ANSWERS:\r\n      return {\r\n        ...state,\r\n        answers: action.answers,\r\n      };\r\n\r\n    case RESET_QUIZ:\r\n      return {\r\n        ...state,\r\n        answers: [],\r\n        currentQuestion: 0,\r\n        currentAnswer: \"\",\r\n        showResults: false,\r\n        error: \"\",\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default quizReducer;","import React, { useReducer } from \"react\";\r\n\r\nimport Progress from \"./components/Progress\";\r\nimport Quesiton from \"./components/Question\";\r\nimport \"./App.css\";\r\nimport Answers from \"./components/Answers\";\r\nimport { questions } from \"./questions/questions\";\r\nimport QuizContext from './context/QuizContext';\r\n\r\nimport {\r\n  SET_ANSWERS,\r\n  SET_CURRENT_QUESTION,\r\n  SET_CURRENT_ANSWER,\r\n  SET_ERROR,\r\n  SET_SHOW_RESULTS,\r\n  RESET_QUIZ,\r\n} from './reducers/types.js';\r\n\r\nimport quizReducer from './reducers/QuizReducer';\r\n\r\nfunction App() {\r\n  // const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  // const [currentAnswer, setcurrentAnswer] = useState(\"\");\r\n  // const [answers, setAnswers] = useState([]);\r\n  // const [showResults, setShowResults] = useState(false);\r\n  // const [error, setError] = useState(\"\");\r\n\r\n  const initialState = {\r\n    questions,\r\n    currentQuestion: 0,\r\n    currentAnswer: '',\r\n    answers: [],\r\n    showResults: false,\r\n    error: '',\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(quizReducer, initialState);\r\n  const {currentQuestion, currentAnswer, answers, showResults, error} = state;\r\n\r\n  const question = questions[currentQuestion];\r\n\r\n  const renderError = () => {\r\n    if (!error) {\r\n      return;\r\n    }\r\n\r\n    return <div className=\"error\">{error}</div>;\r\n  };\r\n\r\n  const renderResultMark = (question, answer) => {\r\n    if (question.correct_answer === answer.answer) {\r\n      return <span className=\"correct\">Correct</span>;\r\n    }\r\n\r\n    return <span className=\"failed\">Failed</span>;\r\n  };\r\n\r\n  const renderResultsData = () => {\r\n    return answers.map((answer) => {\r\n      const question = questions.find(\r\n        (question) => question.id === answer.questionId\r\n      );\r\n\r\n      return (\r\n        <div key={question.id}>\r\n          {question.question} - {renderResultMark(question, answer)}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  const restart = () => {\r\n    dispatch({ type: RESET_QUIZ });\r\n    // setAnswers([]);\r\n    // setcurrentAnswer(\"\");\r\n    // setCurrentQuestion(0);\r\n    // setShowResults(false);\r\n  };\r\n  const next = () => {\r\n    const answer = {questionId: question.id, answer: currentAnswer};\r\n    if (!currentAnswer) {\r\n      dispatch({type: SET_ERROR, error: 'Please select an option'});\r\n      // setError(\"Please select an option\");\r\n      return;\r\n    }\r\n\r\n    answers.push(answer);\r\n    dispatch({type: SET_ANSWERS, answers});\r\n    dispatch({type: SET_CURRENT_ANSWER, currentAnswer: ''});\r\n\r\n    // setAnswers(answers);\r\n    // setcurrentAnswer(\"\");\r\n\r\n    if (currentQuestion + 1 < questions.length) {\r\n      dispatch({\r\n        type: SET_CURRENT_QUESTION,\r\n        currentQuestion: currentQuestion + 1,\r\n      });\r\n      // setCurrentQuestion(currentQuestion + 1);\r\n      return;\r\n    }\r\n    dispatch({type: SET_SHOW_RESULTS, showResults: true});\r\n    // setShowResults(true);\r\n  };\r\n\r\n  if (showResults) {\r\n    return (\r\n      <div className=\"container results\">\r\n        <h2>Results</h2>\r\n        <ul>{renderResultsData()}</ul>\r\n        <button className=\"btn btn-primary\" onClick={restart}>\r\n          Restart\r\n        </button>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <QuizContext.Provider value={{state, dispatch}}>\r\n        <div className=\"container\">\r\n          <Progress total={questions.length} current={currentQuestion + 1} />\r\n          <Quesiton\r\n          // question={question.question}\r\n          />\r\n          {renderError()}\r\n          <Answers\r\n            // question={question}\r\n            // currentAnswer={currentAnswer}\r\n            // dispatch={dispatch}\r\n            // handleClick={handleClick}\r\n          />\r\n          <button className=\"btn btn-primary\" onClick={next}>\r\n            Confirm and Continue\r\n          </button>\r\n        </div>\r\n      </QuizContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}